Test Case 1: Test with SIGPIPE

Description: This test case tests the server's ability to handle with SIGPIPE.
In this test case, the client close the connection right before the server
calls send() to send data back.
-------------------------------------------------------------------------------
1. Run lisod inside gdb, before running, set a breakpoint at function io_send.
2. Use netcat to send arbitrary data to Liso server.
3. At this point, the breakpoint should be hit. Without continueing lisod,
   terminate netcat.
4. Continue running lisod and it will try to send data to an already closed
   socket and a SIGPIPE will be generated. See if the server terminates when
   receiving SIGPIPE.
*******************************************************************************


Test Case 2: Test with Large Data

Decription: Use large_data.py to send very large data to server.
-------------------------------------------------------------------------------
large_data.py:
1. Send specific size of data to the server.
2. With 50% probabiltiy, close the connection immdiately after sending data.
   And with 50% probability, receive a random amount of data from the server.
   The purpose is this is to make the connection abnormal.
3. Established a new connection to the server.
4. Send and receive data to
*******************************************************************************

Test Case 3: Test Linked list

Decription: The server uses linked list to maintain client sockets, the purpose
of this test case is to see whether the linked list operate correctly.
-------------------------------------------------------------------------------
linked_list.py:
1. Establish serveral connections to the server.
2. Close those connections in random order.
*******************************************************************************

Test Case 4: Memory Leak

Use valgrind to check if there's memory leak
-------------------------------------------------------------------------------
valgrind --tool=memcheck --leak-check=yes ./lisod <port>
